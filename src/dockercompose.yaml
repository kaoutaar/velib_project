version: '3.9'

networks:
  appnet:
    driver: bridge

services:
  zookeeper:
    image: 'bitnami/zookeeper:3.8.1'
    container_name: zookeeper
    restart: on-failure
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - appnet



  kafka:
    image: 'bitnami/kafka:3.4.0'
    container_name: kafka
    restart: on-failure
    ports:
      - '9092:9092'
    environment:
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    healthcheck:
      test: kafka-topics.sh --create --if-not-exists --topic stations_topic --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1
      interval: 2s 
      timeout: 7s
      retries: 20
    networks:
      - appnet



  mssql:
    image: 'mssqlapp'
    container_name: mssql
    restart: on-failure
    ports:
      - '1433:1433'
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -U sa -P MY1password -i /code/setup.sql
      interval: 3s
      timeout: 7s
      retries: 20
    networks:
      - appnet



  spark:
    image: 'pyspark'
    container_name: spark
    restart: on-failure
    volumes:
      - spark_streampool:/code/streampool 
    command: sh -c "python /code/producer.py & \
                    python /code/stream_consumer.py"                             
    depends_on:
      mssql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - appnet




  pyapp:
    image: 'pyapp'
    container_name: pyapp
    restart: on-failure
    ports:
      - '8501:8501'
    volumes:
      - spark_streampool:/code/streampool
    # command: sh -c "streamlit run velib.py"                             
    depends_on:
      - spark
    networks:
      - appnet


volumes:
  spark_streampool: